I'd like to create a software using Kafka, Spring Boot, Kotlin, Docker, and MongoDB. The project will include unit and integration tests, and follow a clean architecture, SOLI principles with Controller, Service, and Repository. I like to create a guide for this software.

Context:
The goal is to allow doctors to be created with their specialties, and for patients to be able to book appointments. A Kafka consumer will process these booking requests and find the best available time based on the patient's preferences.

For example:
I want to see an orthopedist at 9 AM on 04/23/2025, but the first available time is actually 3 PM on 04/30/2025.
In that case, the patient will need to accept this new proposed time to proceed with the booking.

Here's the flow logic:

- The user makes a request to book a consultation.
- A Kafka message is created with the booking data and patient information.
- A processor listens to the topic and searches for the earliest available time for a suitable doctor.
- Each doctor must register their specialty and availability — for example, an orthopedist may work on Mondays, Wednesdays, and Fridays from 8 AM to 11 AM and from 1 PM to 5 PM.
- Each appointment takes 30 minutes.
- If the requested time is available, the system books it.
- If the requested time is not available (already booked), the system will suggest the next available time, and the patient must accept it to complete the booking. While waiting for the patient's response, that proposed time should be temporarily marked as unavailable to prevent multiple consultations from being booked at the same time.

Phase 1: Prepare the project [COMPLETED]
 - Create docker structure for this application [DONE]
 - Create docker structure for kafka [DONE]
 - Create docker structure for mongoDB [DONE]
 - Update application.properties with MongoDB and Kafka configurations [DONE]
 - Update build.gradle with necessary dependencies [DONE]
 - Create a empty repository in GIT [DONE]
 - Add the files in the commit [DONE]
 - Make the commit [DONE]

Phase 2 - Authentication:
 - As we saw in the rules, we will follow OWASP best practices

Phase 2.1 - User Model [DONE]
 - We have a client registry that includes an email, password, and an automatically generated ID.
 - The email must be valid and unique.
 - The password must contain at least one uppercase letter, one lowercase letter, one number, one special character, and be at least 8 characters long.

Phase 2.2 - Create an endpoint to register a user [DONE]
 - Create a POST request to register a user following all the rules mentioned above.

Phase 2.3 - API Documentation [DONE]
 - Implement Swagger/OpenAPI for API documentation
 - Document all DTOs, controllers, and endpoints
 - Configure security to allow access to Swagger UI

Phase 2.4 - Create request to generate token [DONE]
 - Create a POST request to receive the email and password, and validate the credentials.
 - If the credentials are valid, generate a JWT token with a 10-minute expiration and a refresh token with a 15-day expiration.
 - Save the refresh token in a model that includes user information, the refresh token, expiration date, and automatically delete it if expired.
 - The JWT token should contain the user ID. Store the secret_key in the .properties file.

Phase 2.5 - Create request to refresh token [DONE]
 - Validate if the refresh token has not expired.
 - Generate a new pair of tokens with the same expiration times.
 - Delete the old refresh token and create a new one.

Phase 2.6 - Validate token [DONE]
 - Intercept the request, in the header look for the Authorization field.
 - It must start with "Bearer ".
 - First, check if the token is valid.
 - Then, check if the token has not expired.
 - Then, check if the toke is the type access and not refresh
 - After that, extract the userId from the token and verify if a user with this ID exists. If not, return a "token invalid" error.
 - If the user exists, store the user ID in the SecurityContextHolder.

Phase 3 - CRUD Doctors [DONE]
 - Remember to follow every rule in .cursor/rules.
 - I want you to create a CRUD for doctors.
 - Each doctor should have a name and specialty.
 - We need to define the days and times when the doctor will be available, for example: Mondays, Wednesdays, and Fridays from 8 AM to 11 AM and from 1 PM to 5 PM.
 - The most important part of editing is updating the availability.


Phase 4 - Appointment Solicitation [DONE]
 - Remember to follow every rule in .cursor/rules.
 - We need to save the appointment solicitation.
 - We will receive the patient’s information: Name, Age, Phone and Email.
 - We will also receive the requested specialty, date, and time for the consultation.
 - If we don’t have a doctor with that specialty, we return an error.
 - We save all this information in the solicitation table.
 - We send the ID of this solicitation to a Kafka topic.

Phase 5 - Consumer: Validate Appointment Solicitation [DONE]
 - Remember, in Phase 4 we created the solicitation, so it's important to use the same collection to simply update and first mark the status as PROCESSED, and after validations, as either SUGGESTED or CONFIRMED.
 - In case of any error, we need to update the status back to PENDING and re-publish the message to the topic.
 - We need to read the topic that contains the appointment information.
 - We will only validate solicitations with the status PENDING.
 - We check if the requested time is available for any doctor with the required specialty.
 - If available, we confirm the appointment and save the ID of the doctor who will attend the patient.
 - A doctor cannot have two appointments at the same time.
 - Each appointment lasts 30 minutes.
 - Therefore, if we have a solicitation at 14:00 and another at 14:05, the same doctor cannot take both.
 - If no doctor is available at the requested time, we will assign the first available time for any doctor with the required specialty.
 - If the assigned time is different from the requested time, the status must wait for confirmation by the patient (we will create a REST API in the future for this confirmation).

Phase 6 - Confirming a Different Time
 - We need two routes here.
 - These two requests can be handled in the AppointmentSolicitationController.
 - In Phase 5, we have two rules below:
 - Rule in Phase 5 "If no doctor is available at the requested time, we will assign the first available time for any doctor with the required specialty".
 - Another rule in Phase 5 "If the assigned time is different from the requested time, the status must wait for confirmation by the patient (we will create a REST API in the future for this confirmation)."
 - Phase 5 is already implemented.
 - Now we need to work on Phase 6.1 and 6.2.

Phase 6.1 - Get Suggested Appointments
 - First, a GET request that returns all appointments with the status SUGGESTED.
 - I don't need to send any additional information in the request.
 - Implement pagination with 10 appointments per page.

Phase 6.2 - Confirm Suggested Appointment
 - I will send you the ID of the appointment and whether it was accepted or not.
 - You need to validate that the appointment has the status SUGGESTED.
 - If it has any other status, throw an error.